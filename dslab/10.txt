#include&lt;stdio.h&gt;
#include&lt;conio.h&gt;
#include&lt;alloc.h&gt;
struct node
{
int info;
struct node *left;
struct node *right;
};
typedef struct node NODE;
NODE *root=NULL;
void create (int x)
{
NODE *temp,*prev,*cur;
temp=(NODE*)malloc(sizeof(NODE));
temp-&gt;left=NULL;
temp-&gt;right=NULL;
temp-&gt;info=x;
if(root==NULL)
{
root=temp;
return;
}
prev=NULL;
cur=root;
while(cur!=NULL)
{
prev=cur;
if(x&lt;cur-&gt;info) cur=cur-&gt;left;
else
if(x&gt;cur-&gt;info)cur=cur-&gt;right;
else
{
printf(&quot;\n duplicate value not allowed&quot;);
return;
}
}
if(x&lt;prev-&gt;info)
prev-&gt;left=temp;
else
prev-&gt;right=temp;
}
void preorder(NODE *root)
{
if(root!=NULL)
{
printf(&quot;%d&quot;,root-&gt;info);
preorder(root-&gt;left);
preorder(root-&gt;right);
}
}
void inorder(NODE *root)
{
if(root!=NULL)
{
inorder(root-&gt;left);
printf(&quot;%d&quot;,root-&gt;info);
inorder(root-&gt;right);
}
}
void postorder(NODE *root)
{
if(root!=NULL)
{
postorder(root-&gt;left);
postorder(root-&gt;right);
printf(&quot;%d&quot;,root-&gt;info);
}
}
void main()
{
int item,choice,flag;
while(1)
{
clrscr();
printf(&quot;\n..... binary search tree...\n\n&quot;);
printf(&quot;1.create\n2.preorder\n3.inorder\n4.postorder\n5.exit\n&quot;);
printf(&quot;\n enter ur choice&quot;);
scanf(&quot;%d&quot;,&amp;choice);
switch(choice)
{
case 1 :printf(&quot;\n enter element to b inserted:&quot;);
scanf(&quot;%d&quot;,&amp;item);
create(item);
break;
case 2: preorder(root);
break;
case 3:inorder(root);
break;
case 4:postorder(root);
break;
default: return;
}
getch();
}
}